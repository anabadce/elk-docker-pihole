input {
#  beats {
#    port => 5044
#  }
  file {
    path => "/opt/pihole.log"
    start_position => "beginning"
    tags => ["pihole"]
    type => "logs"
  }
}

filter {
  if "pihole" in [tags] {

    grok {
      patterns_dir => ["/usr/share/logstash/patterns/"]
      match => {
                "message" => [

 # request - query[]
 "^%{DNSMASQPREFIX} query\[%{DATA:query_type}\] %{FQDN:domain_request} from %{IP:request_from}$",

 "^%{DNSMASQPREFIX} query\[%{DATA:query_type}\] \*%{FQDN:domain_request} from %{IP:request_from}$",

 "^%{DNSMASQPREFIX} non-query opcode from %{IP:request_from}$",

 # --------- reply -----------

 # reponse domain to ip
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is %{IP:ip_response}$",

  # respone ip to domain
 "^%{DNSMASQPREFIX} reply %{IP:ip_request} is %{FQDN:domain_response}$",

 # domain is not IP
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is %{RESPONSETYPE:response_type}$",

 # piholed CNAME inspection
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is blocked during CNAME inspection",

 # response is srv
 "^%{DNSMASQPREFIX} reply %{SRV} is \<SRV\>$",

 # -------------------------------------------

 # response config domain is no IP
 "^%{DNSMASQPREFIX} config %{FQDN:domain_request} is %{RESPONSETYPE:response_type}$",

 # piholed
 "^%{DNSMASQPREFIX} \/etc\/pihole\/gravity\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # piholed 5.0
 "^%{DNSMASQPREFIX} gravity blocked %{FQDN:blocked_domain} is %{IP:pihole}$",

 # piholed 5.0
 "^%{DNSMASQPREFIX} gravity blocked %{FQDN:blocked_domain} is NODATA$",

 # piholed local
 "^%{DNSMASQPREFIX} \/etc\/pihole\/local\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # blacklist
 "^%{DNSMASQPREFIX} \/etc\/pihole\/black\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # regex
 "^%{DNSMASQPREFIX} \/etc\/pihole\/regex\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # reverse response etc hosts ip to domain
 "^%{DNSMASQPREFIX} \/etc\/hosts %{IP:ip_request} is %{FQDN:domain_response}$",

 # reverse response etc hosts domain to ip
 "^%{DNSMASQPREFIX} \/etc\/hosts %{FQDN:domain_request} is %{IP:ip_response}$",

 # forward dns to
 "^%{DNSMASQPREFIX} forwarded %{FQDN:domain_request_forward} to %{IP:dns_forward_to}$",

 # --------- cached or cached-stale -----------
 # cached domain to ip
 "^%{DNSMASQPREFIX} %{DNSMASQCACHED} %{FQDN:domain_request} is %{IP:ip_response}$",

 # cached ip to domain
 "^%{DNSMASQPREFIX} %{DNSMASQCACHED} %{IP:ip_request} is %{FQDN:domain_response}$",

 # cached or cached-stale domain to ip all
 "^%{DNSMASQPREFIX} %{DNSMASQCACHED} %{FQDN:domain_request} is %{RESPONSETYPE:response_type}$",

 # cached or cached-stale is srv
 "^%{DNSMASQPREFIX} %{DNSMASQCACHED} %{SRV} is \<SRV\>$",

  # cached or cached-stale is truncated
 "^%{DNSMASQPREFIX} %{DNSMASQCACHED} reply is truncated$",

 # -------------------------------------------

 # exactly blacklisted
 "^%{DNSMASQPREFIX} exactly blacklisted %{FQDN:blocked_domain} is %{IP:pihole}$",

 # regex blacklisted
 "^%{DNSMASQPREFIX} regex blacklisted %{FQDN:blocked_domain} is %{IP:pihole}$",


 # PTR - delete?
 #"^%{DNSMASQPREFIX} query\[%{WORD:query_type}\] %{HOSTNAMEPTR:request} from %{IP:request_from}$",

 # PTR forwarded - delete?
 #"^%{DNSMASQPREFIX} forwarded %{HOSTNAMEPTR:request} to %{IP:dns_forward_to}$" ,

 # clients sending url instead of domain
 "^%{DNSMASQPREFIX} (query\[.*\]|config|forwarded|reply|cached|cached-stale) %{URI:URI}.*$",

 # Pi-hole hostname
 "^%{DNSMASQPREFIX} Pi-hole hostname %{FQDN:domain_request} is %{IP:ip_response}$",

 # SERVFAIL
 "^%{DNSMASQPREFIX} reply error is SERVFAIL"

                  ]
            }
      }

      if [request_from] and [message] =~ "\ query\[" {
        mutate {
          update => { "type" => "request_query" }
        }
        mutate {
          add_field => { "query_host" => "%{request_from}" }
        }
        dns {
          nameserver => "192.168.50.1"
          reverse => ["query_host"]
          action => "replace"
          hit_cache_size => 10000
          hit_cache_ttl => 900
          failed_cache_size => 512
          failed_cache_ttl => 900
        }
      }

      else if [message] =~ "\ non-query\ " {
        mutate {
          update => { "type" => "non-query" }
        }
      }

      else if [message] =~ "\ reply\ " {
        mutate {
          update => { "type" => "reply" }
        }
      }

      else if [message] =~ "\ (cached|cached-stale)\ " {
        mutate {
          update => { "type" => "cached" }
        }
      }

      else if [message] =~ "Pi-hole hostname" {
        mutate {
          update => { "type" => "pihole-hostname" }
        }
      }

      else if [message] =~ "\ config\ " {
        mutate {
          update => { "type" => "pihole-hostname" }
        }
      }

      else if [blocked_domain] {
        mutate {
          update => { "type" => "blocked" }
        }
      }

      else if [message] =~ "\/etc\/hosts" {
        mutate {
          update => { "type" => "reverse_hostfile" }
        }
      }

      else if [dns_forward_to] {
        mutate {
          update => { "type" => "dns_forward" }
        }
      }

#       if [domain_request] {
#         geoip {
# #          cache_size => "10000"
#           ecs_compatibility => "disabled"
#           source => "domain_request"
#         }
#       } 

      if [ip_request] {
        geoip {
          ecs_compatibility => "disabled"
          source => "ip_request"
        }
      }
      
      if [ip_response] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{domain_request}" }
        }
      }

      if [domain_response] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{domain_response}" }
        }              
      }

      if [blocked_domain] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{blocked_domain}" }
        }
      }

    date {
      match => [ "date", "MMM  d HH:mm:ss","MMM dd HH:mm:ss" ]
      timezone => "Australia/Melbourne"				 
    }

  } # END of: if [path] =~ "pihole" {

} # END of: filter {

output {
    #stdout { codec => rubydebug }
    # if "pihole" in [tags] {
    #    stdout { codec => json }
    # }
    if "pihole" in [tags] {
        elasticsearch {
            hosts => ["es01:9200"]
            #manage_template => false
            index => "pihole-%{+YYYY.MM.dd}"
        }
    }
}
